---
info:
  app:
    name: '@info.app.name@'
    version: '@info.app.version@'
    grailsVersion: '@info.app.grailsVersion@'

grails:
    serverURL: 'http://dev.ala.org.au:8080'
    profile: web
    codegen:
        defaultPackage: au.org.ala.images
    gorm:
        default:
            mapping:
                id:
                    generator: 'org.hibernate.id.enhanced.SequenceStyleGenerator'
                    params:
                    - prefer_sequence_per_entity: false
        reactor:
            # Whether to translate GORM events into Reactor events
            # Disabled by default for performance reasons
            events: false
    assets:
        bundle: false
    config:
        locations:
            - file:///data/image-service/config/image-service-config.properties
            - file:///data/image-service/config/image-service-config.yml
            - file:///data/image-service/config/image-service-config.groovy
    mime:
        use:
            accept:
                header: true
        disable:
            accept:
                header:
                    userAgents:
        types:
            all: '*/*'
            atom: application/atom+xml
            css: text/css
            csv: text/csv
            form: application/x-www-form-urlencoded
            html:
              - text/html
              - application/xhtml+xml
            image:
              - image/jpeg
              - image/jpg
              - image/png
              - image/bmp
              - image/tiff
              - image/webp
              - image/apng
              - image/*
            js: text/javascript
            json:
              - application/json
              - text/json
            multipartForm: multipart/form-data
            pdf: application/pdf
            rss: application/rss+xml
            text: text/plain
            hal:
              - application/hal+json
              - application/hal+xml
            xml:
              - text/xml
              - application/xml
    urlmapping:
        cache:
            maxsize: 1000
    controllers:
        upload:
            maxFileSize: 200000000
            maxRequestSize: 200000000
        defaultScope: singleton
    converters:
        encoding: UTF-8
    views:
        default:
            codec: html
        gsp:
            encoding: UTF-8
            htmlcodec: xml
            codecs:
                expression: html
                scriptlets: html
                taglib: none
                staticparts: none
    databinding:
        convertEmptyStringsToNull: false

server:
    servlet:
      context-path: ''

---
flyway:
    enabled: true
    table: schema_version
    baselineOnMigrate: true
    baselineVersion: 1
    outOfOrder: false
---
hibernate:
    allow_update_outside_transaction: true # Hibernate 5 made transactions required to flush changes, set to true for backwards compat but should be set to false and bugs fixed in the future
    show_sql: false
    dialect: net.kaleidos.hibernate.PostgresqlExtensionsDialect
    cache:
        queries: true
        use_second_level_cache: false
        use_query_cache: true
        region:
            factory_class: org.hibernate.cache.jcache.internal.JCacheRegionFactory
    jdbc:
        lob:
            #https://stackoverflow.com/questions/49110818/method-org-postgresql-jdbc-pgconnection-createclob-is-not-yet-implemented
            non_contextual_creation: true

dataSource:
    driverClassName: org.postgresql.Driver
    dbCreate: validate
    pooled: true
    jmxExport: true
    type: "com.zaxxer.hikari.HikariDataSource"


environments:
    development:
        dataSource:
            logSql: false
            url: jdbc:postgresql://localhost/images?autoReconnect=true&connectTimeout=0&useUnicode=true&characterEncoding=UTF-8
            username: "images"
            password: "images"
            properties:
                maximumPoolSize: 10
                registerMbeans: true
                connectionTimeout: 5000
    test:
        grails:
          config:
            locations: []
        flyway:
            baselineOnMigrate: false
        dataSource:
            embeddedPostgres: true
            pooled: true
            jmxExport: true
            embeddedPort: 6543
            username: postgres
            password: postgres
            url: jdbc:postgresql://localhost:6543/postgres?autoReconnect=true&connectTimeout=0&useUnicode=true&characterEncoding=UTF-8
        imageservice:
            imagestore:
                root: '/tmp/image-service/store'
                inbox: '/tmp/image-service/incoming'
            exportDir: '/tmp/image-service/exports'
            batchUpload: '/tmp/image-service/uploads'
    travis:
      grails:
        config:
          locations: [ ]
      flyway:
          baselineOnMigrate: false
      dataSource:
          embeddedPostgres: true
          pooled: true
          jmxExport: true
          embeddedPort: 6543
          username: postgres
          password: postgres
          url: jdbc:postgresql://localhost:6543/postgres?autoReconnect=true&connectTimeout=0&useUnicode=true&characterEncoding=UTF-8
      imageservice:
          imagestore:
              root: '/home/travis/build/AtlasOfLivingAustralia/image-service/temp-store'
              inbox: '/home/travis/build/AtlasOfLivingAustralia/image-service/temp-incoming'
          exportDir: '/home/travis/build/AtlasOfLivingAustralia/image-service/temp-exports'
          batchUpload: '/home/travis/build/AtlasOfLivingAustralia/image-service/temp-uploads'
    production:
        hibernate:
            dialect: net.kaleidos.hibernate.PostgresqlExtensionsDialect
        dataSource:
            dbCreate: validate
            driverClassName: org.postgresql.Driver
            url: jdbc:postgresql://localhost/images?autoReconnect=true&connectTimeout=0&useUnicode=true&characterEncoding=UTF-8
security:
    core:
        uri-filter-pattern:
          - '/admin/*'
          - '/admin'
          - '/admin/'
          - '/image/deleteImage/*'
          - '/storageLocation'
          - '/storageLocation/*'
        optional-filter-pattern:
          - '/ws/createSubimage'
    cas:
        enabled: false # default for backwards compat with v1
        appServerName: 'http://dev.ala.org.au:8080'
        uriFilterPattern:
          - '/admin/*'
          - '/admin'
          - '/admin/'
          - '/alaAdmin'
          - '/alaAdmin/*'
          - '/image/deleteImage/*'
          - '/storageLocation'
          - '/storageLocation/*'
        authenticateOnlyIfLoggedInPattern:
          - '/ws/createSubimage'
        bypass: false
        disableCAS: false
    oidc:
        enabled: true # default for backwards compat with v1
        scope: openid profile email ala roles
        clientId: changeme
        secret: changeme
        allowUnsignedIdTokens: true # Disable once CAS no longer suggests the none algorithm
        discoveryUri: https://auth-test.ala.org.au/cas/oidc/.well-known
    jwt:
        enabled: true # default for backwards compat with v1
        fallbackToLegacyKeys: true # Reset to false once legacy api keys no longer supported
        discoveryUri: ${security.oidc.discoveryUri}
    apikey:
        auth:
            serviceUrl: https://auth.ala.org.au/apikey/
    ip:
        whitelist:
        - 127.0.0.1
        - 0:0:0:0:0:0:0:1
        - ::1
imageservice:
    imagestore:
        root: '/data/image-service/store'
        inbox: '/data/image-service/incoming'
        staging: '/data/image-service/store/staging'
    batchUpload: '/data/image-service/upload'
    exportDir: '/data/image-service/exports'
    apache:
        root: '${grails.serverURL}${grails.contextPath}/store/'
        # space separated list
        multiple_roots: '${grails.serverURL}${grails.contextPath}/store/'
    thumbnail:
        size: 300

serverName: 'http://devt.ala.org.au:8080'

skin:
    layout: 'ala-main'
    fluidLayout: true
headerAndFooter:
  version: "2"
  baseURL: "https://www.ala.org.au/commonui-bs3-2019"

quartz:
    autoStartup: true
    jdbcStore : false
    waitForJobsToCompleteOnShutdown: true
    exposeSchedulerInRepository: false
    props:
        scheduler:
            skipUpdateCheck: true

---
info:
    app:
        name: '@info.app.name@'
        version: '@info.app.version@'
        grailsVersion: '@info.app.grailsVersion@'
spring:
    main:
        banner-mode: "off"
    groovy:
        template:
            check-template-location: false

    jpa:
        properties:
            hibernate:
                jdbc:
                    lob:
                        non_contextual_creation: true

# Spring Actuator Endpoints are Disabled by Default
endpoints:
    enabled: true
    jmx:
        enabled: true

placeholder:
    sound:
        thumbnail: "classpath:images/200px-Speaker_Icon.svg.png"
        large: "classpath:images/500px-Speaker_Icon.svg.png"
    document:
        thumbnail: "classpath:images/200px-Document_icon.svg.png"
        large: "classpath:images/500px-Document_icon.svg.png"
    missing:
        thumbnail: "classpath:images/200px-Document_icon.svg.png"

openapi:
    title: Image Service API
    description: API Documentation for Image Services
    terms: https://www.ala.org.au/who-we-are/terms-of-use/
    contact:
        name: ALA Support
        url: "https://www.ala.org.au"
        email: support@ala.org.au
    license:
        name: Mozilla Public License 1.1
        url: https://www.mozilla.org/en-US/MPL/1.1/
    version: '@info.app.version@'
    cachetimeoutms: 0
    components:
      security:
        oauth2:
          scopes:
            image-service/read: Read or list any or all images records
            image-service/write: Write to an images record

facets: ["recognisedLicence", "dataResourceUid", "creator.keyword", "imageSize", "fileType", "format", "dateUploadedYearMonth"]

analytics:
    credentialsJson: "/data/image-service/config/google-analytics.json"
    URL: "https://www.google-analytics.com"
    ID: "UA-4355440-1"
    baseURL: "https://www.googleapis.com/analytics/v3/data/ga"
    viewID: "ga:197294038"
    trackThumbnails: false
    trackLargeViewer: false
    trackDetailedView: false

elasticsearch:
  indexName: "images"
  maxFacetSize: 10000
  maxOffset: 10000
  maxPageSize: 200
  defaultPageSize: 10
  batchIndexSize: 1000
  hosts:
      - host: "127.0.0.1"
        scheme: "http"
        port: 9200

# Number of days to wait before purging completed batch jobs
purgeCompletedAgeInDays: 3

# The URLs to recognise as image service URL for the purposes of recognising incoming
# URLs for images (to avoid re-downloading the images)
imageServiceUrls: ["http://dev.ala.org.au:8080","https://images.ala.org.au"]

# External links
collectory:
    baseURL: "https://collections.ala.org.au"
biocache:
    baseURL: "https://biocache.ala.org.au"
    service:
        baseURL: ${biocache.baseURL}/ws
        searchPath: /occurrences/search
    imagesFieldName: all_image_url

http:
    default:
        connectTimeoutMs: 120000
        readTimeoutMs: 120000
