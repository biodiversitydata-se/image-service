buildscript {
    repositories {
        mavenLocal()
        maven { url "https://nexus.ala.org.au/content/groups/public/" }
        maven { url "https://repo.grails.org/grails/core" }
    }
    dependencies {
        classpath "org.grails:grails-gradle-plugin:$grailsVersion"
        classpath "gradle.plugin.com.github.erdi.webdriver-binaries:webdriver-binaries-gradle-plugin:2.0"
        classpath "org.grails.plugins:hibernate5:7.0.5"
        classpath "com.bertramlabs.plugins:asset-pipeline-gradle:3.3.2"
    }
}

plugins {
    id "com.gorylenko.gradle-git-properties" version "2.3.2"
    id "org.flywaydb.flyway" version "5.2.4"
}

version "2.0.4"

group "au.org.ala"

apply plugin:"eclipse"
apply plugin:"idea"
apply plugin:"war"
apply plugin:"org.grails.grails-web"
apply plugin:"com.github.erdi.webdriver-binaries"
apply plugin:"com.bertramlabs.asset-pipeline"
apply plugin:"org.grails.grails-gsp"
apply plugin: 'maven'
apply plugin: 'maven-publish'


//apply from: 'https://raw.githubusercontent.com/AtlasOfLivingAustralia/travis-build-configuration/master/travis_grails_publish.gradle'

sourceCompatibility = 1.11
targetCompatibility = 1.11


//grails {
//    exploded = true
//    plugins {
//        compile project(':images-client-plugin')
//    }
//}


repositories {
    mavenLocal()
    maven { url "https://nexus.ala.org.au/content/groups/public/" }
    maven { url "https://repo.grails.org/grails/core" }
    mavenCentral()
}

configurations {
    developmentOnly
    runtimeClasspath {
        extendsFrom developmentOnly
    }
}

configurations.all {
    resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
}

dependencies {

    compile group: 'org.grails', name: 'grails-async'
    compile group: 'org.grails', name: 'grails-async-gpars'

    compile group: 'org.grails.plugins', name: 'grails-pretty-time', version: '4.0.0'
    compile 'org.grails.plugins:csv:1.0.1'

    compile 'xml-apis:xml-apis:1.4.01'

    compile 'com.opencsv:opencsv:5.6'
    compile group: 'com.googlecode.owasp-java-html-sanitizer', name: 'owasp-java-html-sanitizer', version: '20200713.1'

    // ALA plugins
    compile group: 'org.grails.plugins', name: 'ala-ws-plugin', version: '3.1.2', changing: true
    compile group: 'org.grails.plugins', name: 'ala-bootstrap3', version: '4.1.0', changing: true
    compile group: 'org.grails.plugins', name: 'ala-admin-plugin', version: '2.3.0', changing: true
    compile group: 'org.grails.plugins', name: 'ala-auth', version: '5.1.1', changing: true
    compile group: 'org.grails.plugins', name: 'ala-ws-security-plugin', version: '4.1.2', changing: true
    compile group: 'au.org.ala.plugins.grails', name:'images-client-plugin', version: '1.1', changing: true

    // Added dependencies
    runtime 'com.zaxxer:HikariCP:5.0.1'
    compile 'org.grails.plugins:postgresql-extensions:7.0.0'
    compile "org.flywaydb:flyway-core:5.2.4"
    compile 'org.grails.plugins:cache-headers:2.0.2'
    runtime 'org.codehaus.groovy:groovy-dateutil'
    compile 'dk.glasius:external-config:2.0.1'

    compile 'org.grails.plugins:quartz:2.0.13'
    implementation 'org.quartz-scheduler:quartz:2.2.1' // Is not pulled in by default

    compile group: 'org.locationtech.spatial4j', name: 'spatial4j', version: '0.7'
    compile group: 'org.locationtech.jts', name: 'jts-core', version: '1.15.0'
    compile "com.amazonaws:aws-java-sdk-s3:$amazonAwsSdkVersion"
    compile 'org.javaswift:joss:0.10.4'
    runtime 'org.postgresql:postgresql:42.3.3'

    compile 'org.elasticsearch:elasticsearch:7.0.1'
    compile 'org.elasticsearch.client:elasticsearch-rest-high-level-client:7.0.1'
    // override log4j in elasticsearch plugin
    // TODO remove this once no log4j vulnerable transitive deps are used.
    runtime group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.17.1'
    runtime group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.17.1'

    compile 'org.imgscalr:imgscalr-lib:4.2'
    compile 'org.apache.commons:commons-imaging:1.0-SNAPSHOT'
    compile 'org.apache.tika:tika-core:2.0.0'
    compile 'com.github.jai-imageio:jai-imageio-core:1.4.0'
    compile 'au.org.ala:image-utils:1.9.0'

    compile 'net.lingala.zip4j:zip4j:2.9.1'
    compile 'com.google.guava:guava:31.1-jre'
    compile 'org.apache.avro:avro:1.11.0'
    implementation 'org.xerial.snappy:snappy-java:1.1.8.4'

    // Swagger
    compile('au.org.ala.plugins:openapi:1.1.0')

    // Google analytics requirement
    compile 'com.google.api-client:google-api-client:1.33.2'
    compile 'com.google.apis:google-api-services-analytics:v3-rev20190807-1.32.1'

    // Standard grails
    developmentOnly("org.springframework.boot:spring-boot-devtools")
    compile "org.springframework.boot:spring-boot-starter-logging"
    compile "org.springframework.boot:spring-boot-autoconfigure"
    compile "org.grails:grails-core"
    compile "org.springframework.boot:spring-boot-starter-actuator"
    compile "org.springframework.boot:spring-boot-starter-tomcat"
    compile "org.grails:grails-web-boot"
    compile "org.grails:grails-logging"
    compile "org.grails:grails-plugin-rest"
    compile "org.grails:grails-plugin-databinding"
    compile "org.grails:grails-plugin-i18n"
    compile "org.grails:grails-plugin-services"
    compile "org.grails:grails-plugin-url-mappings"
    compile "org.grails:grails-plugin-interceptors"
    compile "org.grails.plugins:cache"
    compile "org.grails.plugins:cache-ehcache:3.0.0"
    compile "org.grails.plugins:async"
    compile "org.grails.plugins:scaffolding"
    compile "org.grails.plugins:events"
    compile "org.grails.plugins:hibernate5"
//    compile "org.hibernate:hibernate-core:5.4.18.Final"
    compile "org.hibernate:hibernate-jcache"
    runtime 'org.ehcache:ehcache'

    compile "org.grails.plugins:gsp"
    compileOnly "io.micronaut:micronaut-inject-groovy"
    console "org.grails:grails-console"
    profile "org.grails.profiles:web"
    runtime "org.glassfish.web:el-impl:2.1.2-b03"
//    runtime "com.h2database:h2"
//    runtime "org.apache.tomcat:tomcat-jdbc"
    runtime "javax.xml.bind:jaxb-api:2.3.1"
    runtime 'com.bertramlabs.plugins:asset-pipeline-grails:3.3.2'
    testCompile "io.micronaut:micronaut-inject-groovy"
    testCompile "org.grails:grails-gorm-testing-support"
    testCompile "org.mockito:mockito-core"
    testCompile "org.grails:grails-web-testing-support"
    testCompile "org.grails.plugins:geb"
    testCompile "org.seleniumhq.selenium:selenium-remote-driver:3.14.0"
    testCompile "org.seleniumhq.selenium:selenium-api:3.14.0"
    testCompile "org.seleniumhq.selenium:selenium-support:3.14.0"
    testRuntime "org.seleniumhq.selenium:selenium-chrome-driver:3.14.0"
    testRuntime "org.seleniumhq.selenium:selenium-firefox-driver:3.14.0"

    testCompile 'io.micronaut:micronaut-http-client'

    // Testing
    testCompile 'org.grails.plugins:embedded-postgres:1.1.2'
    testCompile "com.opentable.components:otj-pg-embedded:0.13.0" // required transitive dependency from the plugin.
    testCompile 'cloud.localstack:localstack-utils:0.2.20'
    testCompile "com.amazonaws:aws-java-sdk:$amazonAwsSdkVersion" // full AWS SDK included in test scope for localstack config
    testCompile 'com.palantir.docker.compose:docker-compose-rule-junit4:1.7.0'
}

bootJar {
    enabled = true
    classifier = 'exec'
    launchScript()
}

bootWar {
    enabled = true
    launchScript()
}

springBoot {
    buildInfo()
//    layout = 'WAR'
}

bootRun {
    ignoreExitValue true
    jvmArgs(
            '-Dspring.output.ansi.enabled=always',
            '-noverify',
            '-XX:TieredStopAtLevel=1',
            '-Xmx1024m')
    sourceResources sourceSets.main
    String springProfilesActive = 'spring.profiles.active'
    systemProperty springProfilesActive, System.getProperty(springProfilesActive)
}

tasks.withType(GroovyCompile) {
    configure(groovyOptions) {
        forkOptions.jvmArgs = ['-Xmx1024m']
    }
}

tasks.withType(Test) {
    systemProperty "geb.env", System.getProperty('geb.env')
    systemProperty "geb.build.reportsDir", reporting.file("geb/integrationTest")
    systemProperty "webdriver.chrome.driver", System.getProperty('webdriver.chrome.driver')
    systemProperty "webdriver.gecko.driver", System.getProperty('webdriver.gecko.driver')
}

assets {
    minifyJs = true
    minifyCss = true
    includes = ["fonts/*"]
}

publishing {
    repositories {
        maven {
            name 'Nexus'
            url "https://nexus.ala.org.au/content/repositories/${project.version.endsWith('-SNAPSHOT') ? 'snapshots' : 'releases' }"
            credentials {
                username = System.getenv('TRAVIS_DEPLOY_USERNAME')
                password = System.getenv('TRAVIS_DEPLOY_PASSWORD')
            }
        }
    }
    publications {
        mavenJar(MavenPublication) {
            pom.withXml {
                def pomNode = asNode()
                pomNode.dependencyManagement.replaceNode {}

                // simply remove dependencies without a version
                // version-less dependencies are handled with dependencyManagement
                // see https://github.com/spring-gradle-plugins/dependency-management-plugin/issues/8 for more complete solutions
                pomNode.dependencies.dependency.findAll {
                    it.version.text().isEmpty()
                }.each {
                    it.replaceNode {}
                }
            }
            artifact bootJar
        }
    }
}
